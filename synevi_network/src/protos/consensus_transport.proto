syntax = "proto3";

package consensus_transport;

service ConsensusTransport {
  rpc PreAccept(PreAcceptRequest) returns (PreAcceptResponse) {}
  rpc Commit(CommitRequest) returns (CommitResponse) {}
  rpc Accept(AcceptRequest) returns (AcceptResponse) {}
  rpc Apply(ApplyRequest) returns (ApplyResponse) {}
  rpc Recover(RecoverRequest) returns (RecoverResponse) {}
}

message PreAcceptRequest {
  bytes id = 1;
  bytes event = 2;
  bytes timestamp_zero = 3;
}

message PreAcceptResponse {
  bytes timestamp = 1;
  bytes dependencies = 2;
  bool nack = 3;
}

message AcceptRequest {
  bytes id = 1;
  bytes ballot = 2;
  bytes event = 3;
  bytes timestamp_zero = 4;
  bytes timestamp = 5;
  bytes dependencies = 6;
}

message AcceptResponse {
  bytes dependencies = 1;
  bool nack = 2;
}

message CommitRequest {
  bytes id = 1;
  bytes event = 2;
  bytes timestamp_zero = 3;
  bytes timestamp = 4;
  bytes dependencies = 5;
}

message CommitResponse {
  // repeated Dependency results = 1; // Theoretically not needed?
}

message ApplyRequest {
  bytes id = 1;
  bytes event = 2;
  // This is extra to make it easier to identify the event
  bytes timestamp_zero = 3;
  bytes timestamp = 4;
  bytes dependencies = 5;
  bytes transaction_hash = 6;
  bytes execution_hash = 7; 
}

message ApplyResponse {}

message RecoverRequest {
  bytes id = 1;
  bytes ballot = 2;
  bytes event = 3;
  bytes timestamp_zero = 4;
}

enum State {
  STATE_UNDEFINED = 0;
  STATE_PRE_ACCEPTED = 1;
  STATE_ACCEPTED = 2;
  STATE_COMMITED = 3;
  STATE_APPLIED = 4;
}

message RecoverResponse {
  State local_state = 1;
  bytes wait = 2;
  bool superseding = 3;
  bytes dependencies = 4;
  bytes timestamp = 5;
  bytes nack = 6;
}
