syntax = "proto3";

package configure_transport;

service TimeService {
  rpc GetTime(GetTimeRequest) returns (GetTimeResponse) {}
}

// I have time X 
message GetTimeRequest {
  bytes timestamp = 1;
}

// I have time Y
message GetTimeResponse {
  bytes local_timestamp = 1;
  bytes diff = 2; 
}

// RoundTripLatency -> Diff between Request and Response
// Skew ~ LocalTimestamp - (Timestamp + RoundTripLatency / 2) -> Between Node Get and Node Respond

service BroadcastService {
    rpc RestartNode(RestartNodeRequest) returns (RestartNodeResponse) {}
    rpc CustomBroadcast(CustomBroadcastRequest) returns (CustomBroadcastResponse) {}
}



message RestartNodeRequest {
    bytes last_applied = 1; // if new T0::default, else last_applied
    bytes last_applied_hash = 2;
}

message RestartNodeResponse {
    bytes event = 1; // encoded events
}

message CustomBroadcastRequest {
    bytes message = 1;
}

message CustomBroadcastResponse {}


service ReconfigurationService {
    rpc JoinElectorate(JoinElectorateRequest) returns (JoinElectorateResponse) {}
    rpc GetEvents(GetEventRequest) returns (stream GetEventResponse) {}
    rpc ReadyElectorate(ReadyElectorateRequest) returns (ReadyElectorateResponse) {}
}

// Is this really neccessary?
// In theory the node executing the JoinElectorate transaction could collect in the same step all
// last_applieds, calculate the newest and return that to the joining node.
// As long as the joining node has started its ReplicaBuffer before joining, no event will be
// skiped
// service InitService {
//     rpc GetLastApplied(GetLastAppliedRequest) returns (GetLastAppliedResponse) {}
// }

message JoinElectorateRequest {
    uint32 node_serial = 1;
    bytes node_id = 2;
    string host = 3;
}

message JoinElectorateResponse {
    bytes last_applied = 1;
    bytes last_applied_hash = 2;
}

message GetEventRequest {
    bytes last_applied = 1;
}

message GetEventResponse {
    bytes id = 1;
    bytes t_zero = 2;
    bytes t = 3;
    uint32 state = 4;
    bytes transaction = 5;
    bytes dependencies = 6;
    bytes ballot = 7;
    bytes last_updated = 8;
    bytes previous_hash = 9;
    bytes transaction_hash = 10;
    bytes execution_hash = 11;
}

message ReadyElectorateRequest {
     uint32 node_serial = 1;
     bytes node_id = 2;
}

message ReadyElectorateResponse {}
