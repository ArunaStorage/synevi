syntax = "proto3";

package configure_transport;
import "consensus_transport.proto";

service TimeService {
  rpc GetTime(GetTimeRequest) returns (GetTimeResponse) {}
}

// I have time X 
message GetTimeRequest {
  bytes timestamp = 1;
}

// I have time Y
message GetTimeResponse {
  bytes local_timestamp = 1;
  bytes diff = 2; 
}

// RoundTripLatency -> Diff between Request and Response
// Skew ~ LocalTimestamp - (Timestamp + RoundTripLatency / 2) -> Between Node Get and Node Respond


service ReconfigurationService {
    rpc JoinElectorate(JoinElectorateRequest) returns (JoinElectorateResponse) {}
    rpc GetEvents(GetEventRequest) returns (stream GetEventResponse) {}
    rpc ReadyElectorate(ReadyElectorateRequest) returns (ReadyElectorateResponse) {}
}

message JoinElectorateRequest {
    Config config = 1;
}

message Config {
    uint32 node_serial = 1;
    bytes node_id = 2;
    string host = 3;
    bool ready = 4;
}

message JoinElectorateResponse {
    uint32 member_count = 1;
}

message GetEventRequest {
    bytes last_applied = 1;
}

message GetEventResponse {
    bytes id = 1;
    bytes t_zero = 2;
    bytes t = 3;
    consensus_transport.State state = 4;
    bytes transaction = 5;
    bytes dependencies = 6;
    bytes ballot = 7;
    bytes last_updated = 8;
    bytes previous_hash = 9;
    bytes transaction_hash = 10;
    bytes execution_hash = 11;
}

message ReadyElectorateRequest {
     uint32 node_serial = 1;
     bytes node_id = 2;
}

message ReadyElectorateResponse {}


service InitService {
    rpc ReportElectorate(ReportElectorateRequest) returns (ReportElectorateResponse) {}
}

message ReportElectorateRequest {
    repeated Config configs = 1;
}

message ReportElectorateResponse {}

